/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <time.h>
#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#include <malloc.h>

#include <stdbool.h>
#include <string.h>
#include <limits.h>
#include "giflib/gif_lib.h"

//#include <android/log.h>
//#define  LOG_TAG    "libgif"
//#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)

#define D_GIF_ERR_NO_FRAMES       1000
#define D_GIF_ERR_INVALID_SCR_DIMS  1001
#define D_GIF_ERR_INVALID_IMG_DIMS  1002
#define D_GIF_ERR_IMG_NOT_CONFINED  1003

typedef struct
{
  uint8_t blue;
  uint8_t green;
  uint8_t red;
  uint8_t alpha;
} argb;

typedef struct
{
  unsigned int duration;
  short transpIndex;
  unsigned char disposalMethod;
} FrameInfo;

typedef struct GifInfo GifInfo;
typedef int
(*RewindFunc)(GifInfo *);

struct GifInfo
{
  GifFileType* gifFilePtr;
  unsigned long lastFrameReaminder;
  unsigned long nextStartTime;
  int currentIndex;
  unsigned int lastDrawIndex;
  FrameInfo* infos;
  argb* backupPtr;
  int startPos;
  unsigned char* rasterBits;
  char* comment;
  unsigned short loopCount;
  int currentLoop;
  RewindFunc rewindFunc;
  jfloat speedFactor;
};

typedef struct
{
  JavaVM* jvm;
  jobject stream;
  jclass streamCls;
  jmethodID readMID;
  jmethodID resetMID;
  jbyteArray buffer;
} StreamContainer;

typedef struct
{
  JavaVM* jvm;
  int pos;
  jbyteArray buffer;
  jsize arrLen;
} ByteArrayContainer;

typedef struct
{
  int pos;
  jbyte* bytes;
  jlong capacity;
} DirectByteBufferContainer;

/* Header for class pl_droidsonroids_gif_GifDrawable */

#ifndef _Included_pl_droidsonroids_gif_GifDrawable
#define _Included_pl_droidsonroids_gif_GifDrawable
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    renderFrame
 * Signature: ([II[I)V
 */
JNIEXPORT void JNICALL
Java_pl_droidsonroids_gif_GifDrawable_renderFrame(JNIEnv *, jclass,
    jintArray, jobject, jintArray);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    openFd
 * Signature: ([ILjava/io/FileDescriptor;J)I
 */
JNIEXPORT jint JNICALL Java_pl_droidsonroids_gif_GifDrawable_openFd
  (JNIEnv *, jclass, jintArray, jobject, jlong);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    openByteArray
 * Signature: ([I[B)I
 */
JNIEXPORT jint JNICALL Java_pl_droidsonroids_gif_GifDrawable_openByteArray
  (JNIEnv *, jclass, jintArray, jbyteArray);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    openDirectByteBuffer
 * Signature: ([ILjava/nio/ByteBuffer;)I
 */
JNIEXPORT jint JNICALL Java_pl_droidsonroids_gif_GifDrawable_openDirectByteBuffer
  (JNIEnv *, jclass, jintArray, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    openStream
 * Signature: ([ILjava/io/InputStream;)I
 */
JNIEXPORT jint JNICALL Java_pl_droidsonroids_gif_GifDrawable_openStream
  (JNIEnv *, jclass, jintArray, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    openFile
 * Signature: ([ILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_pl_droidsonroids_gif_GifDrawable_openFile
  (JNIEnv *, jclass, jintArray, jstring);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    free
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_pl_droidsonroids_gif_GifDrawable_free
  (JNIEnv *, jclass, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    reset
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_pl_droidsonroids_gif_GifDrawable_reset
  (JNIEnv *, jclass, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    setSpeedFactor
 * Signature: (IF)V
 */
JNIEXPORT void JNICALL Java_pl_droidsonroids_gif_GifDrawable_setSpeedFactor
  (JNIEnv *, jclass, jobject, jfloat);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    getComment
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_pl_droidsonroids_gif_GifDrawable_getComment
  (JNIEnv *, jclass, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    getLoopCount
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_pl_droidsonroids_gif_GifDrawable_getLoopCount
  (JNIEnv *, jclass, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    getDuration
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_pl_droidsonroids_gif_GifDrawable_getDuration
  (JNIEnv *, jclass, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    getCurrentPosition
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_pl_droidsonroids_gif_GifDrawable_getCurrentPosition
  (JNIEnv *, jclass, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    seekToTime
 * Signature: (II[I)I
 */
JNIEXPORT void JNICALL Java_pl_droidsonroids_gif_GifDrawable_seekToTime
  (JNIEnv *, jclass, jobject, jint, jintArray);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    seekToFrame
 * Signature: (II[I)I
 */
JNIEXPORT void JNICALL Java_pl_droidsonroids_gif_GifDrawable_seekToFrame
  (JNIEnv *, jclass, jobject, jint, jintArray);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    saveRemainder
 * Signature: (I)I
 */
JNIEXPORT void JNICALL Java_pl_droidsonroids_gif_GifDrawable_saveRemainder
  (JNIEnv *, jclass, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    restoreRemainder
 * Signature: (I)I
 */
JNIEXPORT void JNICALL Java_pl_droidsonroids_gif_GifDrawable_restoreRemainder
  (JNIEnv *, jclass, jobject);

/*
 * Class:     pl_droidsonroids_gif_GifDrawable
 * Method:    getAllocationByteCount
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_pl_droidsonroids_gif_GifDrawable_getAllocationByteCount
  (JNIEnv *, jclass, jobject);

unsigned long getRealTime(void);

void getBitmap(argb* bm, GifInfo* info, JNIEnv * env);

#ifdef __cplusplus
}
#endif
#endif